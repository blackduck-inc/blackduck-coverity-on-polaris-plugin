{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Help Topics Polaris Software Integrity Platform for Jenkins 1.1.0-SIGQA4-SNAPSHOT If the list of help topics is not visible to the left, try increasing the width of your browser window. Options for navigating this help content: Use the top-level topic list in the left sidebar to navigate to a topic. For pages that have multiple sections, a table of contents for the page appears on the right sidebar. Type a search term in the Search box on the top right of the page, then select from the list of topics that contain your search term. If you are new to Polaris Software Integrity Platform for Jenkins, reading the topics in the order presented in the left sidebar is a logical path. You can click the Next link at the bottom right of the page to go to the next topic.","title":"<b>Help Topics</b>"},{"location":"#help-topics","text":"Polaris Software Integrity Platform for Jenkins 1.1.0-SIGQA4-SNAPSHOT If the list of help topics is not visible to the left, try increasing the width of your browser window. Options for navigating this help content: Use the top-level topic list in the left sidebar to navigate to a topic. For pages that have multiple sections, a table of contents for the page appears on the right sidebar. Type a search term in the Search box on the top right of the page, then select from the list of topics that contain your search term. If you are new to Polaris Software Integrity Platform for Jenkins, reading the topics in the order presented in the left sidebar is a logical path. You can click the Next link at the bottom right of the page to go to the next topic.","title":"Help Topics"},{"location":"10-introduction/","text":"Introduction Polaris Software Integrity Platform helps security and development teams analyze security risks in their software products. The Polaris Software Integrity Platform for Jenkins plugin enables you to invoke Polaris Software Integrity Platform analysis from your Jenkins builds. You can use Polaris Software Integrity Platform for Jenkins in both freestyle and pipeline jobs. When the Polaris Software Integrity Platform for Jenkins plugin runs, it checks the configured Polaris Software Integrity Platform server and the Jenkins node to see if the correct version of the Polaris Software Integrity Platform Command Line Interpreter (CLI) is installed on the node. If the Polaris Software Integrity Platform CLI is not installed, the plugin installs the CLI. In either case, Polaris Software Integrity Platform for Jenkins then executes the Polaris CLI, which analyzes your project, and uploads results to Polaris Software Integrity Platform.","title":"Introduction"},{"location":"10-introduction/#introduction","text":"Polaris Software Integrity Platform helps security and development teams analyze security risks in their software products. The Polaris Software Integrity Platform for Jenkins plugin enables you to invoke Polaris Software Integrity Platform analysis from your Jenkins builds. You can use Polaris Software Integrity Platform for Jenkins in both freestyle and pipeline jobs. When the Polaris Software Integrity Platform for Jenkins plugin runs, it checks the configured Polaris Software Integrity Platform server and the Jenkins node to see if the correct version of the Polaris Software Integrity Platform Command Line Interpreter (CLI) is installed on the node. If the Polaris Software Integrity Platform CLI is not installed, the plugin installs the CLI. In either case, Polaris Software Integrity Platform for Jenkins then executes the Polaris CLI, which analyzes your project, and uploads results to Polaris Software Integrity Platform.","title":"Introduction"},{"location":"20-requirements/","text":"Requirements The requirements for Polaris Software Integrity Platform for Jenkins are as follows: Access to the internet Jenkins version 2.60.1 or higher. Non-LTS versions of Jenkins are not supported. Java 8. Polaris Software Integrity Platform version 2020.03 or later, and a valid access token. Polaris configuration file. Ensure that the Polaris CLI can run successfully from the command line on the project that you are building, and that the Polaris configuration file is included in the project source that is checked into the source code control system. Refer to the Polaris Configuration Reference for more information about creating and maintaining a Polaris configuration file.","title":"Requirements"},{"location":"20-requirements/#requirements","text":"The requirements for Polaris Software Integrity Platform for Jenkins are as follows: Access to the internet Jenkins version 2.60.1 or higher. Non-LTS versions of Jenkins are not supported. Java 8. Polaris Software Integrity Platform version 2020.03 or later, and a valid access token. Polaris configuration file. Ensure that the Polaris CLI can run successfully from the command line on the project that you are building, and that the Polaris configuration file is included in the project source that is checked into the source code control system. Refer to the Polaris Configuration Reference for more information about creating and maintaining a Polaris configuration file.","title":"Requirements"},{"location":"30-installing/","text":"Installation Before you use Polaris Software Integrity Platform for Jenkins, you must install the plugin in Jenkins. For information about installing and updating plugins, refer to the Jenkins documentation .","title":"Installation"},{"location":"30-installing/#installation","text":"Before you use Polaris Software Integrity Platform for Jenkins, you must install the plugin in Jenkins. For information about installing and updating plugins, refer to the Jenkins documentation .","title":"Installation"},{"location":"50-configuring/","text":"Configuration After the Polaris Software Integrity Platform for Jenkins plugin is installed, and before you use it in a job, you must configure the following: Polaris Software Integrity Platform for Jenkins system configuration Polaris CLI tool installation Polaris Software Integrity Platform for Jenkins system configuration Use the following process to configure Polaris Software Integrity Platform for Jenkins: Navigate to Manage Jenkins Configure System . Scroll down to the Synopsys Polaris Software Integrity Platform section and complete the following: Polaris URL : The URL to your Polaris Software Integrity Platform instance. Polaris credentials : The Jenkins secret text credentials that you created to store your Polaris Software Integrity Platform access token. Advanced : If you want to change the timeout that Polaris Software Integrity Platform for Jenkins uses while waiting for a response from the Polaris Software Integrity Platform server, click Advanced and enter the timeout in seconds in the Polaris connection timeout field. Test connection to Polaris : To test that Polaris Software Integrity Platform for Jenkins can connect to Polaris Software Integrity Platform using the configuration data you have entered, click Test connection to Polaris . Click Save . Configuring Polaris CLI tool installation Use the following process to configure Polaris CLI: In Jenkins, navigate to Manage Jenkins Global Tool Configuration . Scroll down to the Polaris CLI section, click Add Polaris CLI , and complete the following: Name : A name for the Polaris CLI installation. Install automatically : To enable Polaris Software Integrity Platform for Jenkins to install the Polaris CLI from your Polaris Software Integrity Platform server automatically, leave this box checked, and proceed to the next step. To point Polaris Software Integrity Platform for Jenkins to an existing Polaris CLI installation, uncheck this box and enter the path to the Polaris CLI directory in the Installation directory field. Click Save .","title":"Configuration"},{"location":"50-configuring/#configuration","text":"After the Polaris Software Integrity Platform for Jenkins plugin is installed, and before you use it in a job, you must configure the following: Polaris Software Integrity Platform for Jenkins system configuration Polaris CLI tool installation","title":"Configuration"},{"location":"50-configuring/#polaris-software-integrity-platform-for-jenkins-system-configuration","text":"Use the following process to configure Polaris Software Integrity Platform for Jenkins: Navigate to Manage Jenkins Configure System . Scroll down to the Synopsys Polaris Software Integrity Platform section and complete the following: Polaris URL : The URL to your Polaris Software Integrity Platform instance. Polaris credentials : The Jenkins secret text credentials that you created to store your Polaris Software Integrity Platform access token. Advanced : If you want to change the timeout that Polaris Software Integrity Platform for Jenkins uses while waiting for a response from the Polaris Software Integrity Platform server, click Advanced and enter the timeout in seconds in the Polaris connection timeout field. Test connection to Polaris : To test that Polaris Software Integrity Platform for Jenkins can connect to Polaris Software Integrity Platform using the configuration data you have entered, click Test connection to Polaris . Click Save .","title":"Polaris Software Integrity Platform for Jenkins system configuration"},{"location":"50-configuring/#configuring-polaris-cli-tool-installation","text":"Use the following process to configure Polaris CLI: In Jenkins, navigate to Manage Jenkins Global Tool Configuration . Scroll down to the Polaris CLI section, click Add Polaris CLI , and complete the following: Name : A name for the Polaris CLI installation. Install automatically : To enable Polaris Software Integrity Platform for Jenkins to install the Polaris CLI from your Polaris Software Integrity Platform server automatically, leave this box checked, and proceed to the next step. To point Polaris Software Integrity Platform for Jenkins to an existing Polaris CLI installation, uncheck this box and enter the path to the Polaris CLI directory in the Installation directory field. Click Save .","title":"Configuring Polaris CLI tool installation"},{"location":"60-using/","text":"Using plugin in a build You can use Polaris Software Integrity Platform for Jenkins in either freestyle or pipeline jobs to invoke the Polaris CLI as part of your Jenkins build. Refer to the Polaris Command Line Reference for information about the Polaris CLI. Freestyle job To use Polaris Software Integrity Platform for Jenkins in a freestyle job, add it as a build step at the point where you want to build your project, and complete the following: Polaris CLI Installation : Select the name that you assigned to your Polaris CLI installation on the Manage Jenkins Global Tool Configuration page. Polaris Arguments : The arguments that you want passed to the Polaris CLI, for example, analyze . Wait for Issues : If you want the build to wait until Polaris Software Integrity Platform determines whether there are issues with your project, check this box and use the If there are issues field to select the action you want the plugin to take when issues are discovered. Click Advanced... if you want to adjust maximum length of time the job will wait for issues ( Job timeout in minutes ). If you want the build to proceed without waiting, leave the Wait for Issues box unchecked. Please note: Wait for Issues will not cause the build to fail based on the results of incremental analysis, but on the results of issues in Polaris Software Integrity Platform. Click Save . Limited Customer Availability Features For customers using Incremental Analysis (currently in LCA), Polaris Software Integrity Platform for Jenkins offers the ability to create a changeset file for use with Incremental Analysis. Use the generated changeset file with incremental analysis (--incremental) by passing it in as a part of your Polaris Arguments as $CHANGE_SET_FILE_PATH. Populate SCM changeset in file at $CHANGE_SET_FILE_PATH for incremental analysis : Checking this box will cause the plugin to generate a changeset file at $CHANGE_SET_FILE_PATH (by default, $WORKSPACE/.synopsys/polaris/changeSetFile.txt) based on the changeset reported to Jenkins from the SCM filtered by the configured inclusion and exclusion patterns. If no files would be included in the changeset file, skips analysis and sets the configured status. Changeset inclusion patterns : If this field is not blank, only files matching this wildcard filepattern will be included in the changeset file. If this field is blank, all files will be included in the changeset file. Changeset exclusion patterns : Any files matching this wildcard filepattern will be excluded from the changeset file. If this field is blank, no files will be excluded. When static analysis is skipped because the changeset contained no files to analyze : The build status to set when analysis was skipped because the changeset contained no files to analyze. Pipeline job The Polaris Software Integrity Platform for Jenkins plugin provides two pipeline steps: polaris : Runs the Polaris CLI to initiate Polaris Software Integrity Platform analysis of your project. polarisIssueCheck : Waits until Polaris Software Integrity Platform has completed analysis of your project, and determines the number of issues found. Note that for polarisIssueCheck, the timeout in minutes field requires a positive integer. Non-integer values may be truncated by Jenkins before being passed on to the plugin. Documentation on using these pipeline steps can be found in the Jenkins pipeline steps documentation . Escaping arguments Whether using Polaris Software Integrity Platform for Jenkins in a freestyle or pipeline job, Polaris CLI arguments must adhere to specific guidelines: All arguments must be separated by whitespace (specifically: spaces, tabs, newlines, carriage returns, or linefeeds). All values containing whitespace must be surrounded by quotation marks. You must escape all quotation marks (\", ') that are used in values. You must escape all backslashes (\\) that are used in values. For example, the following arguments: --co project={\"branch\":\"new_branch\", \"name\":\"new_name\"} analyze are escaped to: --co project='{\"branch\":\"new_branch\", \"name\":\"new_name\"}' analyze","title":"Using plugin in a build"},{"location":"60-using/#using-plugin-in-a-build","text":"You can use Polaris Software Integrity Platform for Jenkins in either freestyle or pipeline jobs to invoke the Polaris CLI as part of your Jenkins build. Refer to the Polaris Command Line Reference for information about the Polaris CLI.","title":"Using plugin in a build"},{"location":"60-using/#freestyle-job","text":"To use Polaris Software Integrity Platform for Jenkins in a freestyle job, add it as a build step at the point where you want to build your project, and complete the following: Polaris CLI Installation : Select the name that you assigned to your Polaris CLI installation on the Manage Jenkins Global Tool Configuration page. Polaris Arguments : The arguments that you want passed to the Polaris CLI, for example, analyze . Wait for Issues : If you want the build to wait until Polaris Software Integrity Platform determines whether there are issues with your project, check this box and use the If there are issues field to select the action you want the plugin to take when issues are discovered. Click Advanced... if you want to adjust maximum length of time the job will wait for issues ( Job timeout in minutes ). If you want the build to proceed without waiting, leave the Wait for Issues box unchecked. Please note: Wait for Issues will not cause the build to fail based on the results of incremental analysis, but on the results of issues in Polaris Software Integrity Platform. Click Save .","title":"Freestyle job"},{"location":"60-using/#limited-customer-availability-features","text":"For customers using Incremental Analysis (currently in LCA), Polaris Software Integrity Platform for Jenkins offers the ability to create a changeset file for use with Incremental Analysis. Use the generated changeset file with incremental analysis (--incremental) by passing it in as a part of your Polaris Arguments as $CHANGE_SET_FILE_PATH. Populate SCM changeset in file at $CHANGE_SET_FILE_PATH for incremental analysis : Checking this box will cause the plugin to generate a changeset file at $CHANGE_SET_FILE_PATH (by default, $WORKSPACE/.synopsys/polaris/changeSetFile.txt) based on the changeset reported to Jenkins from the SCM filtered by the configured inclusion and exclusion patterns. If no files would be included in the changeset file, skips analysis and sets the configured status. Changeset inclusion patterns : If this field is not blank, only files matching this wildcard filepattern will be included in the changeset file. If this field is blank, all files will be included in the changeset file. Changeset exclusion patterns : Any files matching this wildcard filepattern will be excluded from the changeset file. If this field is blank, no files will be excluded. When static analysis is skipped because the changeset contained no files to analyze : The build status to set when analysis was skipped because the changeset contained no files to analyze.","title":"Limited Customer Availability Features"},{"location":"60-using/#pipeline-job","text":"The Polaris Software Integrity Platform for Jenkins plugin provides two pipeline steps: polaris : Runs the Polaris CLI to initiate Polaris Software Integrity Platform analysis of your project. polarisIssueCheck : Waits until Polaris Software Integrity Platform has completed analysis of your project, and determines the number of issues found. Note that for polarisIssueCheck, the timeout in minutes field requires a positive integer. Non-integer values may be truncated by Jenkins before being passed on to the plugin. Documentation on using these pipeline steps can be found in the Jenkins pipeline steps documentation .","title":"Pipeline job"},{"location":"60-using/#escaping-arguments","text":"Whether using Polaris Software Integrity Platform for Jenkins in a freestyle or pipeline job, Polaris CLI arguments must adhere to specific guidelines: All arguments must be separated by whitespace (specifically: spaces, tabs, newlines, carriage returns, or linefeeds). All values containing whitespace must be surrounded by quotation marks. You must escape all quotation marks (\", ') that are used in values. You must escape all backslashes (\\) that are used in values. For example, the following arguments: --co project={\"branch\":\"new_branch\", \"name\":\"new_name\"} analyze are escaped to: --co project='{\"branch\":\"new_branch\", \"name\":\"new_name\"}' analyze","title":"Escaping arguments"}]}